cmd
java -version
크롬  
eclipse download
C:\z01_weekend
다운받은 eclipse installer 복사
C:\z01_weekend\workspace
C:\z01_weekend\tomcat
eclipse 설치 위치
C:\z01_weekend
eclipse 로딩시,
1. C:\z01_weekend\workspace 실행..

2. eclipse 기본 환경
    1) 한글 encoding : utf-8 방식
       workspace
       html,css,jsp
    2) svn client 설치(자료공유)
    	plugin
		svn server검색
		https://192.168.0.21/svn/web
		future/7777
	
	team ==> commit  : 소스를 svn에 전송할 때 사용
	     ==> update to header : 서버에 있는 자료를 local로 받을 때, 사용
	     ==> refresh cleanup : 소스에 문제가 발생(현재 소스 충돌) locked
	     		걸렸을 때, 처리할 메뉴
    replace with ==> latest from repository
    	 ==> 로컬에 받은 소스와 입력된 소스 상관없이 서버에 있는
    	 소스로 덮어쓰기 할 때.
    정상적으로 update가 replace with가 위 메뉴로 처리가 안 될 때
    	jspexp_svn 삭제 (현재 폴드에 있는 소스 삭제 check)
    	import ==> svn (check project from svn)	 

    3) tomcat(eclipse에서 연동지원 was)
    	8.0
	7080 포트 설정
	4) 브라우저 연결 : 실행시 - window ==> web browser ==> chrome
		 ctrl+f11을 통해 jsp 실행한 결과를 브라우저로 확인할 때,
		 사용할 브라우저 선택.
	
3. dynamic web project 생성
	jspexp\src\main\webapp\index.jsp
	jspexp\src\main\webapp 폴드에서 오른쪽 마우스클릭
	index.jsp 추가
4. eclipse 기본 단축키
	ctrl + (+/-) : 확대/축소
	ctrl + m : 전체화면/기본화면
	ctrl + f11 : 프로그래밍 실행
	ctrl + space : 자동 소스 generator
    ctrl + alt + 방향키(아래) : 라인 복사 처리.
    
# jsp knowledge map
0. 기본 java 프로그램에 대한 이해
    1) primitive data type 변수, 
    	데이터할당(메모리할당-stack, heap(객체참조변수))
    	int num01 = 25;
    	Person p = new Person();   주소와 실제 집
    		 p(객체가 있는 주소값 - stack) new Person()(heap)
    2) 객체(class), 생성, 메서드, 필드
    3) 조건문(if), 반복문(for, while) 
    4) 상속(기본상속, 추상클래스, 인터페이스)
    5) 예외처리
    6) collection, generic : ArrayList<VO> 
    		ArrayList<Board> blist = service.getBoardList(sch);
    		1. 선형리스트형 구조  .add(), get(index)
    		2. for문에서 활용
    			for(Board b:blist){
    				b.getNo(),  b.getTitle()....
    			}
    7) 기타 api 사용 :String, Wrapper클래스
1. 웹에서 client와 server 개념
		브라우저(client) <===> WAS(tomcat)(server)
	1) 요청  url 주소에 입력
	2) 결과 화면 출력
	https://chrome.google.com/webstore/category/extensions?hl=ko
	주소(도메인) ==> ip(도메인기관) ==> 해당 web 서버에 특정한 자원(웹 프로그램)호출
	==> 화면에 html을 받아서 태그들을 랜더링하여 출력한다.
2. 웹에서 프로그래밍 처리 방식
    1) client 서버 호출
    2) server 클라이언트에 page 전송
	3) page호출과 요청값 처리.  주소:port/context명/
    	- page호출 방식
    	- 요청값에 대한 처리 : 
    	- [클라이언트] 호출 방식 : page명?요청key=요청값&요청key2=요청값
    			<form하위 객체 : input/select/textarea
    				<input name="요청key"  value="요청값"
    			입력된 내용은 query string(key=value)형식으로 전환되어
    			서버에 전달된다.	
    			ex) login.jsp?id=himan&pass=7777
    				<form action="login.jsp">
    					<input name="id" value="himan"/>
    					<input name="pass" value="7777"/>
    					
    			
		- [서버] 호출 방식
			request(요청객체)
			String 할당변수 = request.getParameter("요청key");
			할당변수에는 요청값이 들어가 있어서 처리할 수 있다.
			ex) String id = request.getParameter("id");
    3) 서버의 반응으로 처리
    	response(반응객체) - 서버로부터 클라이언트에 전달할 데이터 처리.
    		getWriter().println("<h2>"+name+"</h2>");
    		code로 stream으로 client에 전달한다.
    		html화면, 파일다운/pdf다운(binary파일전달)
    		
    		
    4) 화면 분할 처리
    	include, action tag 활용	
4. 프로그램 처리
    1) html코드 + java 
    	servlet.java : 
	response(서버에서 클라이언트로 데이터전송/화면전송)
	html코드 중간에 script개념을 활용해서 java코드를
	삽입.
	<% %> : scriptlet  로직 처리(java코드)
	<%! %> : declare   클래스나 기능메서드 전역변수 선언
	<%= %> : expression 출력
    2) el/jstl : jsp의 중급 코드 작성.
        ${param.요청값}
        ${paramValues.요청값}
	<c:set var="변수명" value="할당데이터"/>
	<c:forEach var="변수명"  begin="1" end="10">
	<c:forEach var="변수명"  items="${list}">
	<c:if test="조건문">    
5. client와 server 데이터 처리 
    1) page scope (서버단 저장)
    	page, request, session, application
    	
    	ex) request.setAttribute("key", 변수/객체);(controller단)
    		${key} (View단)
    	
    2) cookie(클라이언트단 저장)  
    	(server-->client) response.addCookie(쿠키객체);
    	(client-->server) Cookie[] cookies= request.getCookies();
    	 
6. useBean을 통한 session범위와 함께 데이터 처리
7. 웹에서의 예외 처리.
    0) 대체 페이지 지정이나 다른 프로그램을 처리
    1) http 예외코드 단위 
       200~299 정상범위
       404
       500
    2) java의 클래스단위 예외 처리

8. database 처리.
	1) sql 구문 사용 : 테이블 생성, 조회, 등록, 수정, 삭제
		create table 테이블명( 컬럼명 데이터유형);
		select 컬럼명, *
		from 테이블명
		where 컬럼명 = 데이터;
		insert into 테이블명 values(데이터1, 데이터2.... );
		update 테이블명
			set 컬럼명 = 변경데이터,
		where 컬럼명 = 데이터;
		delete
		from 테이블명
		where 컬럼명 = 데이터; 
		
	2) database 서버에 대한 이해/sql 툴사용
		ip/port/sid/계정/비번접속
	3) jdbc 드라이버(.jar)에 대한 이해
		java에서 각 벤드(database 서버)에서 지원하는 공통 접속모듈
	4) java DB서버 연결 프로그램 처리 순서
	   DB 처리 (jdbc드라이버의 공통 처리 클래스 + 개발자의 필요한 삽입코드)
		연결( Connection )
		대화( Statement )
		결과값 처리(ResultSet)  
			while(rs.next())  rs.next() : 행단위로 커서의 이동
				rs.getString("컬럼명")	
		연결해제(con.close())
		예외처리/자원해제(try{}catch(SQLException e){})
9. mvc 개발패턴(model2)
	1) 개념 : model, view, controller 효율적인 소스 분리 처리.
	2) servlet에 대한 이해(controller)
		model데이터 : view에서 처리할 핵심 데이터
		jsp(view)
	3) 각 기능별 객체 활용 및 역할 분담
10. 기타 실무예제
	1) 회원가입/로그인
	2) 간단한 게시판
	3) ajax를 통한 데이터 처리
		json형식 {"문자열속성":"문자열데이터","숫자형속성":숫자데이터}
		ex) {"empno":7780, "ename":"홍길동"}
	 	
	
	
	

		
		
		









   



